#!/bin/bash

# Copyright 2017, Bal Chettri
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

################################################################################
# This shell script performs an incremental backup of your directory to external 
# drive using rsync. This tool requires cygwin on Windows.

# Enable this for dry run.
#DRY_RUN="--dry-run"

# Root folder to backup. Change this to your folder name on your local system.
# Usually, this should be at the same level of this shell script.
SRC_PATH=./mydir

# Root folder under destination drive where backup will be made(this folder
# will be created if it doesn't exist)
BACKUP_ROOT=backups

# Log file to generate
LOG_FILE=backup.log
################################################################################

# Show a list of available drives
if [ -r /etc/mtab ]; then
    drives=`cut -d ' ' -f 2 /etc/mtab`
    menu=""
    for drive in $drives; do
        if [ $drive = "/" ]; then
            continue
        fi
        if [ $(echo $drive | cut -c -5) = "/usr/" ]; then
            continue
        fi
        menu="$menu $drive"
    done
    menu="$menu Exit"
    PS3="? "
    echo "Select the target location for the backup."
    select DEST_DRIVE in $menu
    do
        break
    done
    if [ -z $DEST_DRIVE ]; then
        echo "Invalid selection."
        exit 0
    fi
    if [ $DEST_DRIVE = "Exit" ]; then
        exit 0
    fi
    DEST_PATH=$DEST_DRIVE/$BACKUP_ROOT
else
    echo "Failed to read drives."
    exit -1
fi

# Check for a valid destination drive
if [ -d $DEST_DRIVE ]; then
    echo "Destination drive $DEST_DRIVE is valid." 
else
    echo "Destination drive $DEST_DRIVE is not valid." 
    exit 1
fi

# Confirm the destination path before proceeding
echo "Backup will be saved at $DEST_PATH."
read -p "Type \"Yes\" to proceed or \"No\" to exit. " opt
if [ -z $opt ]; then
    exit 0
fi
if [ $opt != "Yes" ]; then
    exit 0
fi
echo ""

# Check for a valid backup root directory
if [ -d $DEST_PATH ]; then
    echo "Backup root directory '$BACKUP_ROOT' found." 
else
    echo "Creating backup root directory '$BACKUP_ROOT'."
    mkdir -p $DEST_PATH
fi

# Rename backup.log
if [ -f backup.log ]; then
    mv backup.log backup.log.old
fi

# Always excludes these file types.
EXCLUDES=\
"*.log *.tmp "\
"*.o *.o.d *.obj *.exe.embed.manifest *.exe.intermediate.manifest *_manifest.rc "\
"*.vcxprojResolveAssemblyReference.cache *.sdf *.ipch *.tlog *.lastbuildstate "\
"*.pdb *.idb *.ilk *.ncb *.dep *.res *.i BuildLog.htm "\
"*.class *.d *.dex *.dex.d *.unaligned.apk *.ap_ "\
"*.pyc "\
"*.DS_Store"

EXCLUDES_ALL=""
for excl in $EXCLUDES; do
    EXCLUDES_ALL="$EXCLUDES_ALL --exclude=$excl"
done

OPTIONS="-vrpt --force --delete --log-file=$LOG_FILE $EXCLUDES_ALL $DRY_RUN"

# Append additional options passed in command line
while [ "$1" != "" ]; do
    OPTIONS="$OPTIONS$1 "
    shift
done

echo ""
echo "rsync $OPTIONS $SRC_PATH $DEST_PATH" 
echo ""
read -n1 -r -p "Press any key to continue or Ctrl+C to exit. "

echo ""
echo "Running backup..."
START_TIME=`date`
rsync $OPTIONS $SRC_PATH $DEST_PATH

BACKUP_LAST_FILE=`echo $SRC_PATH | tr -d "."`
BACKUP_LAST_FILE=`echo $BACKUP_LAST_FILE | tr "/" "_"`
touch $DEST_PATH/backup$BACKUP_LAST_FILE.last
cp backup.log $DEST_PATH/backup$BACKUP_LAST_FILE.log

echo ""
echo "Backup started at $START_TIME"
echo "Backup completed at `date`"
